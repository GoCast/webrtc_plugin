/*
 *  Copyright (c) 2011 GoCast. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. All contributing project authors may be found in the 
 *  AUTHORS file in the root of the source tree.
 */

/**********************************************************\

  Auto-generated WebrtcPluginAPI.h

\**********************************************************/

#include <string>
#include <sstream>
#include <boost/weak_ptr.hpp>
#include "JSAPIAuto.h"
#include "BrowserHost.h"
#include "WebrtcPlugin.h"
#include "WPLThreadSafeMessageQueue.h"
#include "ThreadSingle.h"

#ifndef H_WebrtcPluginAPI
#define H_WebrtcPluginAPI

class PluginNotificationsThread;

/**
	Manages the plugin's socket server thread.
    The socket server thread manages the communication between
    the peer connection client and the signin server.
 */
class PluginMainThread : public ThreadSingle
{
public:
    /**
    	Constructor.
    	@param pMsgQ Message queue to store commands to peer connection client.
    	@param pEvtQ Message queue to store events to be fired into JavaScript.
    	@returns N/A.
     */
    PluginMainThread(GoCast::ThreadSafeMessageQueue* pMsgQ,
                     GoCast::ThreadSafeMessageQueue* pEvtQ,
                     bool bAudioOnly):
    
    m_pMsgQ(pMsgQ), m_pEvtQ(pEvtQ), m_bAudioOnly(bAudioOnly) {}
    
    /**
    	Destructor.
    	@returns N/A.
     */
    virtual ~PluginMainThread() {}
    
protected:
    /**
    	Thread's work routine.
    	@returns int: 0
     */
    int workerBee(void);
    
protected:
    /**
    	Message queue to store commands to peer connection client.
     */
    GoCast::ThreadSafeMessageQueue* m_pMsgQ;
    
    /**
    	Message queue to store events to be fired into JavaScript.
     */
    GoCast::ThreadSafeMessageQueue* m_pEvtQ;
    
    bool m_bAudioOnly;
};

/**
	Acts as an interface between the browser's JavaScript and
    the native C++ APIs. Most of the class is generated by
    FireBreath, except for the documented parts.
 */
class WebrtcPluginAPI : public FB::JSAPIAuto
{
public:
    WebrtcPluginAPI(const WebrtcPluginPtr& plugin, const FB::BrowserHostPtr& host);
    virtual ~WebrtcPluginAPI();

    WebrtcPluginPtr getPlugin();

    // Read/Write property ${PROPERTY.ident}
    std::string get_testString();
    void set_testString(const std::string& val);

    // Read-only property ${PROPERTY.ident}
    std::string get_version();

    // Method echo
    FB::variant echo(const FB::variant& msg);
    
    void Start(const std::string& mediaType);
    
    /**
    	Implementation of plugin's "Signin()" JavaScript method.
    	@param peerName Desired peer name
    	@param serverIP Signin server's public IP address.
    	@param serverPort Signin server's public port.
     */
    void Signin(const std::string& peerName,
                const std::string& serverIP,
                const int serverPort);
    
    /**
    	Implementation of the plugin's "Signout()" JavaScript method.
     */
    void Signout(void);
    
    /**
    	Implementation of the plugin's "Call()" JavaScript method.
        Used to setup a voice connection with a particular peer.
    	@param peerName Unique name of the peer under consideration.
     */
    void Call(const std::string& peerName);
    
    /**
    	Implementation of the plugin's "Hangup()" Javascript method.
        Used to hang up on a particular peer.
    	@param peerName Unique name of the peer under consideration.
     */
    void Hangup(const std::string& peerName);
    
    // Event helpers
    FB_JSAPI_EVENT(fired, 3, (const FB::variant&, bool, int));
    FB_JSAPI_EVENT(echo, 2, (const FB::variant&, const int));
    FB_JSAPI_EVENT(notify, 0, ());
    
    /**
    	Fires the "SignedIn" event into JavaScript. A JavaScript
        function can then handle this event.
    	@param std::string& The event's data type.
     */
    FB_JSAPI_EVENT(SignedIn, 1, (const std::string&));

    /**
        Fires the "PeerOnline" event into JavaScript. A JavaScript
        function can then handle this event.
        @param std::string& The event's data type.
     */
    FB_JSAPI_EVENT(PeerOnline, 1, (const std::string&));

    /**
        Fires the "PeerOffline" event into JavaScript. A JavaScript
        function can then handle this event.
        @param std::string& The event's data type.
     */
    FB_JSAPI_EVENT(PeerOffline, 1, (const std::string&));

    /**
        Fires the "RemotePeerCall" event into JavaScript. A JavaScript
        function can then handle this event.
        @param std::string& The event's data type.
     */
    FB_JSAPI_EVENT(RemotePeerCall, 1, (const std::string&));

    /**
        Fires the "RemotePeerHangup" event into JavaScript. A JavaScript
        function can then handle this event.
        @param std::string& The event's data type.
     */
    FB_JSAPI_EVENT(RemotePeerHangup, 1, (const std::string&));
    
    FB_JSAPI_EVENT(RendererAdd, 1, (const std::string&));
    FB_JSAPI_EVENT(RendererRemove, 1, (const std::string&));

    // Method test-event
    void testEvent(const FB::variant& s);

private:
    WebrtcPluginWeakPtr m_plugin;
    FB::BrowserHostPtr m_host;

    std::string m_testString;
    
    /**
    	Pointer to the socket server thread.
     */
    PluginMainThread* m_pMainThread;
    
    /**
    	Pointer to the plugin notifications thread.
     */
    PluginNotificationsThread* m_pNotificationsThread;
    
    /**
    	Message queue for passing commands to peer connection client.
     */
    GoCast::ThreadSafeMessageQueue* m_pMsgQ;
    
    /**
    	Message queue to store events to be fired into JavaScript.
     */
    GoCast::ThreadSafeMessageQueue* m_pEvtQ;
};

/**
	Manages the plugin's notifications thread.
    The class monitors the event queue and fires the 
    events into JavaScript as and when they are enqueued.
 */
class PluginNotificationsThread : public ThreadSingle
{
public:
    /**
    	Constructor.
    	@param pPluginAPI Pointer to the WebrtcPluginAPI instance who owns this thread.
    	@param pEvtQ Message queue to store events to be fired into JavaScript.
    	@returns N/A.
     */
    PluginNotificationsThread(WebrtcPluginAPI* pPluginAPI,
                              GoCast::ThreadSafeMessageQueue* pEvtQ):
    m_pPluginAPI(pPluginAPI), m_pEvtQ(pEvtQ) {}
    
    /**
    	Destructor.
    	@returns N/A.
     */
    virtual ~PluginNotificationsThread() {}
    
protected:
    /**
    	Thread's work routine.
    	@param void <#void description#>
    	@returns int: 0
     */
    int workerBee(void);
    
protected:
    /**
    	Pointer to the WebrtcPluginAPI instance who owns this thread.
     */
    WebrtcPluginAPI* m_pPluginAPI;
    
    /**
        Message queue to store events to be fired into JavaScript.
     */
    GoCast::ThreadSafeMessageQueue* m_pEvtQ;
};

#endif // H_WebrtcPluginAPI

